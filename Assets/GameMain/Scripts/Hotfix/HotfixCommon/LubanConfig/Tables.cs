//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using Cysharp.Threading.Tasks;
using System.Collections.Generic;


namespace cfg
{
   
public sealed class Tables
{
    public Common.TbGlobalConfig TbGlobalConfig {get; private set; }
    public Error.TbErrorInfo TbErrorInfo {get; private set; }
    public Error.TbCodeInfo TbCodeInfo {get; private set; }
    public GameMain.TbSounds_Config TbSounds_Config {get; private set; }
    public GameMain.TbLanguage_Config TbLanguage_Config {get; private set; }
    public GameMain.TbUIData_GameMode TbUIData_GameMode {get; private set; }
    public GameMain.TbUIData_Race TbUIData_Race {get; private set; }
    public GameMain.TbUIData_Character TbUIData_Character {get; private set; }
    public GameMain.TbPlayerData_Character TbPlayerData_Character {get; private set; }
    public GameMain.TbEntityData TbEntityData {get; private set; }
    public GameMain.TbLevelData TbLevelData {get; private set; }

    public Tables() { }
    
    public async UniTask LoadAsync(System.Func<string, UniTask<ByteBuf>> loader)
    {
        var tables = new System.Collections.Generic.Dictionary<string, object>();
		List<UniTask> list = new List<UniTask>();
		list.Add(UniTask.Create(async () =>
		{
			TbGlobalConfig = new Common.TbGlobalConfig(await loader("common_tbglobalconfig")); 
			tables.Add("Common.TbGlobalConfig", TbGlobalConfig);
		}));
		list.Add(UniTask.Create(async () =>
		{
			TbErrorInfo = new Error.TbErrorInfo(await loader("error_tberrorinfo")); 
			tables.Add("Error.TbErrorInfo", TbErrorInfo);
		}));
		list.Add(UniTask.Create(async () =>
		{
			TbCodeInfo = new Error.TbCodeInfo(await loader("error_tbcodeinfo")); 
			tables.Add("Error.TbCodeInfo", TbCodeInfo);
		}));
		list.Add(UniTask.Create(async () =>
		{
			TbSounds_Config = new GameMain.TbSounds_Config(await loader("gamemain_tbsounds_config")); 
			tables.Add("GameMain.TbSounds_Config", TbSounds_Config);
		}));
		list.Add(UniTask.Create(async () =>
		{
			TbLanguage_Config = new GameMain.TbLanguage_Config(await loader("gamemain_tblanguage_config")); 
			tables.Add("GameMain.TbLanguage_Config", TbLanguage_Config);
		}));
		list.Add(UniTask.Create(async () =>
		{
			TbUIData_GameMode = new GameMain.TbUIData_GameMode(await loader("gamemain_tbuidata_gamemode")); 
			tables.Add("GameMain.TbUIData_GameMode", TbUIData_GameMode);
		}));
		list.Add(UniTask.Create(async () =>
		{
			TbUIData_Race = new GameMain.TbUIData_Race(await loader("gamemain_tbuidata_race")); 
			tables.Add("GameMain.TbUIData_Race", TbUIData_Race);
		}));
		list.Add(UniTask.Create(async () =>
		{
			TbUIData_Character = new GameMain.TbUIData_Character(await loader("gamemain_tbuidata_character")); 
			tables.Add("GameMain.TbUIData_Character", TbUIData_Character);
		}));
		list.Add(UniTask.Create(async () =>
		{
			TbPlayerData_Character = new GameMain.TbPlayerData_Character(await loader("gamemain_tbplayerdata_character")); 
			tables.Add("GameMain.TbPlayerData_Character", TbPlayerData_Character);
		}));
		list.Add(UniTask.Create(async () =>
		{
			TbEntityData = new GameMain.TbEntityData(await loader("gamemain_tbentitydata")); 
			tables.Add("GameMain.TbEntityData", TbEntityData);
		}));
		list.Add(UniTask.Create(async () =>
		{
			TbLevelData = new GameMain.TbLevelData(await loader("gamemain_tbleveldata")); 
			tables.Add("GameMain.TbLevelData", TbLevelData);
		}));

		await UniTask.WhenAll(list);

        TbGlobalConfig.Resolve(tables); 
        TbErrorInfo.Resolve(tables); 
        TbCodeInfo.Resolve(tables); 
        TbSounds_Config.Resolve(tables); 
        TbLanguage_Config.Resolve(tables); 
        TbUIData_GameMode.Resolve(tables); 
        TbUIData_Race.Resolve(tables); 
        TbUIData_Character.Resolve(tables); 
        TbPlayerData_Character.Resolve(tables); 
        TbEntityData.Resolve(tables); 
        TbLevelData.Resolve(tables); 
    }

    public void TranslateText(System.Func<string, string, string> translator)
    {
        TbGlobalConfig.TranslateText(translator); 
        TbErrorInfo.TranslateText(translator); 
        TbCodeInfo.TranslateText(translator); 
        TbSounds_Config.TranslateText(translator); 
        TbLanguage_Config.TranslateText(translator); 
        TbUIData_GameMode.TranslateText(translator); 
        TbUIData_Race.TranslateText(translator); 
        TbUIData_Character.TranslateText(translator); 
        TbPlayerData_Character.TranslateText(translator); 
        TbEntityData.TranslateText(translator); 
        TbLevelData.TranslateText(translator); 
    }
}

}